# name: Build and Deploy Social API Code
name: Social Hub API

on: [push, pull_request]

jobs:
  build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRES_IN: ${{secrets.ACCESS_TOKEN_EXPIRES_IN}}

    # setting up a postgres container
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}-test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: Install python version 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      # - name: Run tests
      #   run: pytest --disable-warnings

      # setting up docker properties for pushing and building to docker image
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push to Docker
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{secrets.DOCKER_HUB_USERNAME}}/socialapi:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Image digest
        run: echo ${{steps.docker_build.outputs.digest}}

      # CD steps
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    # environment:
    #   name: production
    steps:
      - name: Deploy to production
        run: echo "Deploying Code to prod"

      # deploying to heroku
      # - name: Pulling git repo
      #   uses: actions/checkout@v2
      # - name: Deploying to heroku
      #   uses: akhileshns/heroku-deploy@v3.12.12
      #   with:
      #     heroku_api_key: ${{secrets.HEROKU_API_KEY}}
      #     heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
      #     heroku_email: ${{secrets.HEROKU_EMAIL}}

      # Deploying to ubuntu server
#       - name: deploy to ubuntu server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{secrets.PROD_HOST}}
#           username: ${{secrets.PROD_USERNAME}}
#           password: ${{secrets.PROD_PASSWORD}}
#           script: |
#             cd app/src
#             git pull
#             echo password | sudo -S systemctl restart api
# # OR you can use the preferred command below
#             echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart
